"""
GENERATED CODE - DO NOT EDIT MANUALLY
This file is generated from schema.zed and should not be modified directly.
"""

from typing import Generic, Literal, TypeVar

# Permission type aliases for each resource type
{% for object_type, perms in permissions.items() %}
{% if perms %}
{{ object_type|to_camel_case }}Permission = Literal[{% for perm in perms %}"{{ perm }}"{% if not loop.last %}, {% endif %}{% endfor %}]
{% else %}
{{ object_type|to_camel_case }}Permission = str
{% endif %}
{% endfor %}

# Type variable for permission literals
P = TypeVar("P", bound=str)

# Base resource class
class Resource(Generic[P]):
    """Base class for all resources with typed permissions."""

    def __init__(self, id: str, resource_type: str):
        self.id = id
        self.type = resource_type

# Resource classes with their specific permission types
{% for object_type in object_types %}
class {{ object_type|to_camel_case }}(Resource[{{ object_type|to_camel_case }}Permission]):
    """{{ object_type|to_camel_case }} resource from schema.zed"""

    # Set the permission type for this resource
    permission_type = {{ object_type|to_camel_case }}Permission

    def __init__(self, id: str):
        super().__init__(id, "{{ object_type }}")
{% endfor %}
